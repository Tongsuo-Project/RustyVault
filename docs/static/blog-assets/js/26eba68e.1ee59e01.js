"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[2224],{73100:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"0.9.x","label":"0.9.x","banner":null,"badge":true,"className":"docs-version-0.9.x","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Index","href":"/SeaORM/docs/index","docId":"index"},{"type":"category","label":"Introduction","collapsible":true,"collapsed":false,"items":[{"type":"link","label":"What is an ORM","href":"/SeaORM/docs/introduction/orm","docId":"introduction/orm"},{"type":"link","label":"Async Programming","href":"/SeaORM/docs/introduction/async","docId":"introduction/async"},{"type":"link","label":"SeaORM Concepts","href":"/SeaORM/docs/introduction/sea-orm","docId":"introduction/sea-orm"},{"type":"link","label":"Tutorial & Examples","href":"/SeaORM/docs/introduction/tutorial","docId":"introduction/tutorial"}]},{"type":"category","label":"Installation & Configuration","collapsible":true,"collapsed":false,"items":[{"type":"link","label":"Database & Async Runtime","href":"/SeaORM/docs/install-and-config/database-and-async-runtime","docId":"install-and-config/database-and-async-runtime"},{"type":"link","label":"Schema Management","href":"/SeaORM/docs/install-and-config/schema","docId":"install-and-config/schema"},{"type":"link","label":"Connection Pool","href":"/SeaORM/docs/install-and-config/connection","docId":"install-and-config/connection"},{"type":"link","label":"Debug Log","href":"/SeaORM/docs/install-and-config/debug-log","docId":"install-and-config/debug-log"}]},{"type":"category","label":"Migration","collapsible":true,"collapsed":false,"items":[{"type":"link","label":"Setting Up Migration","href":"/SeaORM/docs/migration/setting-up-migration","docId":"migration/setting-up-migration"},{"type":"link","label":"Writing Migration","href":"/SeaORM/docs/migration/writing-migration","docId":"migration/writing-migration"},{"type":"link","label":"Running Migration","href":"/SeaORM/docs/migration/running-migration","docId":"migration/running-migration"},{"type":"link","label":"Seeding Data","href":"/SeaORM/docs/migration/seeding-data","docId":"migration/seeding-data"}]},{"type":"category","label":"Generating Entities","collapsible":true,"collapsed":false,"items":[{"type":"link","label":"Using `sea-orm-cli`","href":"/SeaORM/docs/generate-entity/sea-orm-cli","docId":"generate-entity/sea-orm-cli"},{"type":"link","label":"Entity Structure","href":"/SeaORM/docs/generate-entity/entity-structure","docId":"generate-entity/entity-structure"},{"type":"link","label":"Expanded Entity Structure","href":"/SeaORM/docs/generate-entity/expanded-entity-structure","docId":"generate-entity/expanded-entity-structure"},{"type":"link","label":"Enumeration","href":"/SeaORM/docs/generate-entity/enumeration","docId":"generate-entity/enumeration"}]},{"type":"category","label":"Basic CRUD","collapsible":true,"collapsed":false,"items":[{"type":"link","label":"Select","href":"/SeaORM/docs/basic-crud/select","docId":"basic-crud/select"},{"type":"link","label":"Insert","href":"/SeaORM/docs/basic-crud/insert","docId":"basic-crud/insert"},{"type":"link","label":"Update","href":"/SeaORM/docs/basic-crud/update","docId":"basic-crud/update"},{"type":"link","label":"Save","href":"/SeaORM/docs/basic-crud/save","docId":"basic-crud/save"},{"type":"link","label":"Delete","href":"/SeaORM/docs/basic-crud/delete","docId":"basic-crud/delete"},{"type":"link","label":"JSON","href":"/SeaORM/docs/basic-crud/json","docId":"basic-crud/json"},{"type":"link","label":"Raw SQL","href":"/SeaORM/docs/basic-crud/raw-sql","docId":"basic-crud/raw-sql"}]},{"type":"category","label":"Relations","collapsible":true,"collapsed":false,"items":[{"type":"link","label":"One to One","href":"/SeaORM/docs/relation/one-to-one","docId":"relation/one-to-one"},{"type":"link","label":"One to Many","href":"/SeaORM/docs/relation/one-to-many","docId":"relation/one-to-many"},{"type":"link","label":"Many to Many","href":"/SeaORM/docs/relation/many-to-many","docId":"relation/many-to-many"},{"type":"link","label":"Chained Relations","href":"/SeaORM/docs/relation/chained-relations","docId":"relation/chained-relations"},{"type":"link","label":"Self Referencing","href":"/SeaORM/docs/relation/self-referencing","docId":"relation/self-referencing"},{"type":"link","label":"Custom Join Condition","href":"/SeaORM/docs/relation/custom-join-condition","docId":"relation/custom-join-condition"},{"type":"link","label":"Bakery Schema","href":"/SeaORM/docs/relation/bakery-schema","docId":"relation/bakery-schema"}]},{"type":"category","label":"Writing Tests","collapsible":true,"collapsed":false,"items":[{"type":"link","label":"Robust & Correct","href":"/SeaORM/docs/write-test/testing","docId":"write-test/testing"},{"type":"link","label":"Mock Interface","href":"/SeaORM/docs/write-test/mock","docId":"write-test/mock"},{"type":"link","label":"Using SQLite","href":"/SeaORM/docs/write-test/sqlite","docId":"write-test/sqlite"}]},{"type":"category","label":"Advanced Queries","collapsible":true,"collapsed":false,"items":[{"type":"link","label":"Custom Select","href":"/SeaORM/docs/advanced-query/custom-select","docId":"advanced-query/custom-select"},{"type":"link","label":"Conditional Expressions","href":"/SeaORM/docs/advanced-query/conditional-expression","docId":"advanced-query/conditional-expression"},{"type":"link","label":"Aggregate Functions","href":"/SeaORM/docs/advanced-query/aggregate-function","docId":"advanced-query/aggregate-function"},{"type":"link","label":"Custom Joins","href":"/SeaORM/docs/advanced-query/custom-joins","docId":"advanced-query/custom-joins"},{"type":"link","label":"Sub Query","href":"/SeaORM/docs/advanced-query/subquery","docId":"advanced-query/subquery"},{"type":"link","label":"Transaction","href":"/SeaORM/docs/advanced-query/transaction","docId":"advanced-query/transaction"},{"type":"link","label":"Streaming","href":"/SeaORM/docs/advanced-query/streaming","docId":"advanced-query/streaming"},{"type":"link","label":"Custom Active Model","href":"/SeaORM/docs/advanced-query/custom-active-model","docId":"advanced-query/custom-active-model"}]},{"type":"category","label":"Generating SeaQuery Statement","collapsible":true,"collapsed":false,"items":[{"type":"link","label":"Create Table","href":"/SeaORM/docs/generate-sea-query-statement/create-table","docId":"generate-sea-query-statement/create-table"},{"type":"link","label":"Create Enum","href":"/SeaORM/docs/generate-sea-query-statement/create-enum","docId":"generate-sea-query-statement/create-enum"},{"type":"link","label":"Create Index","href":"/SeaORM/docs/generate-sea-query-statement/create-index","docId":"generate-sea-query-statement/create-index"}]},{"type":"category","label":"Internal Design","collapsible":true,"collapsed":false,"items":[{"type":"link","label":"Traits and Types","href":"/SeaORM/docs/internal-design/trait-and-type","docId":"internal-design/trait-and-type"},{"type":"link","label":"Derive Macros","href":"/SeaORM/docs/internal-design/derive-macro","docId":"internal-design/derive-macro"},{"type":"link","label":"Compare with Diesel","href":"/SeaORM/docs/internal-design/diesel","docId":"internal-design/diesel"}]}]},"docs":{"advanced-query/aggregate-function":{"id":"advanced-query/aggregate-function","title":"Aggregate Functions","description":"You can group results selected from SeaORM find with the group_by method. If you wish to further restrict the grouped result set, the having method can help you achieve that.","sidebar":"tutorialSidebar"},"advanced-query/conditional-expression":{"id":"advanced-query/conditional-expression","title":"Conditional Expressions","description":"You can add conditions to SeaORM find with the filter method. You can also restrict the aggregated result with having method. Both of them take seaquery::Condition as a parameter.","sidebar":"tutorialSidebar"},"advanced-query/custom-active-model":{"id":"advanced-query/custom-active-model","title":"Custom Active Model","description":"Creating your own struct with partial fields of a model, which implements IntoActiveModel that can be converted into an ActiveModel with the method intoactivemodel. For example, it can be used as a form submission in a REST API.","sidebar":"tutorialSidebar"},"advanced-query/custom-joins":{"id":"advanced-query/custom-joins","title":"Custom Joins","description":"You can use the join method to construct complex join select queries. It takes any RelationDef defined in entity files, and you can define relation with the belongs_to method as well. Join type is specified using JoinType such as inner join, left join and right join.","sidebar":"tutorialSidebar"},"advanced-query/custom-select":{"id":"advanced-query/custom-select","title":"Custom Select","description":"By default, SeaORM will select all columns defined in the Column enum. You can override the defaults if you wish to select certain columns only.","sidebar":"tutorialSidebar"},"advanced-query/streaming":{"id":"advanced-query/streaming","title":"Streaming","description":"Use async stream on any Select for reducing memory allocation to improve efficiency.","sidebar":"tutorialSidebar"},"advanced-query/subquery":{"id":"advanced-query/subquery","title":"Sub Query","description":"Conditional Expression With Sub Query","sidebar":"tutorialSidebar"},"advanced-query/transaction":{"id":"advanced-query/transaction","title":"Transaction","description":"A transaction is a group of SQL statements executed with ACID guarantee. There are two transaction APIs.","sidebar":"tutorialSidebar"},"basic-crud/delete":{"id":"basic-crud/delete","title":"Delete","description":"Delete One","sidebar":"tutorialSidebar"},"basic-crud/insert":{"id":"basic-crud/insert","title":"Insert","description":"Before diving into SeaORM insert we have to introduce ActiveValue and ActiveModel.","sidebar":"tutorialSidebar"},"basic-crud/json":{"id":"basic-crud/json","title":"JSON","description":"Select JSON Result","sidebar":"tutorialSidebar"},"basic-crud/raw-sql":{"id":"basic-crud/raw-sql","title":"Raw SQL","description":"Query by raw SQL","sidebar":"tutorialSidebar"},"basic-crud/save":{"id":"basic-crud/save","title":"Save","description":"This is a helper method to save (insert / update) ActiveModel into the database.","sidebar":"tutorialSidebar"},"basic-crud/select":{"id":"basic-crud/select","title":"Select","description":"Once you have defined the entity, you are ready to retrieve data from the database. Each row of data in the database corresponds to a Model.","sidebar":"tutorialSidebar"},"basic-crud/update":{"id":"basic-crud/update","title":"Update","description":"Update One","sidebar":"tutorialSidebar"},"generate-entity/entity-structure":{"id":"generate-entity/entity-structure","title":"Entity Structure","description":"Let\'s look at a simple Cake entity.","sidebar":"tutorialSidebar"},"generate-entity/enumeration":{"id":"generate-entity/enumeration","title":"Enumeration","description":"You can use Rust enums in model where the values are mapped to a database string, integer or native enum.","sidebar":"tutorialSidebar"},"generate-entity/expanded-entity-structure":{"id":"generate-entity/expanded-entity-structure","title":"Expanded Entity Structure","description":"SeaORM is dynamic, which means you have the flexibility to configure things runtime. If you are curious what DeriveEntityModel expands into, read along. Otherwise, you can skip this for now.","sidebar":"tutorialSidebar"},"generate-entity/sea-orm-cli":{"id":"generate-entity/sea-orm-cli","title":"Using `sea-orm-cli`","description":"First, install sea-orm-cli with cargo.","sidebar":"tutorialSidebar"},"generate-sea-query-statement/create-enum":{"id":"generate-sea-query-statement/create-enum","title":"Create Enum","description":"You can generate SQL statement to create database tables with enum columns via the Schema helper struct.","sidebar":"tutorialSidebar"},"generate-sea-query-statement/create-index":{"id":"generate-sea-query-statement/create-index","title":"Create Index","description":"You can create indices from entities using Schema::createindexfromentity, or construct IndexCreateStatement manually.","sidebar":"tutorialSidebar"},"generate-sea-query-statement/create-table":{"id":"generate-sea-query-statement/create-table","title":"Create Table","description":"To create tables in database instead of writing TableCreateStatement manually, you can derive it from Entity using Schema::createtablefromentity. This method will help you create a database table including all the columns and foreign key constraints defined in Entity.","sidebar":"tutorialSidebar"},"index":{"id":"index","title":"Index","description":"Introduction","sidebar":"tutorialSidebar"},"install-and-config/connection":{"id":"install-and-config/connection","title":"Connection Pool","description":"To obtain a database connection, use the Database interface:","sidebar":"tutorialSidebar"},"install-and-config/database-and-async-runtime":{"id":"install-and-config/database-and-async-runtime","title":"Database & Async Runtime","description":"First, add sea-orm to the [dependencies] section of your Cargo.toml.","sidebar":"tutorialSidebar"},"install-and-config/debug-log":{"id":"install-and-config/debug-log","title":"Debug Log","description":"SeaORM (with debug-print feature turned on) logs debug messages via the tracing crate.","sidebar":"tutorialSidebar"},"install-and-config/schema":{"id":"install-and-config/schema","title":"Schema Management","description":"If you already have a database with tables and data, you can skip this section and move on to generating SeaORM entities.","sidebar":"tutorialSidebar"},"internal-design/derive-macro":{"id":"internal-design/derive-macro","title":"Derive Macros","description":"EntityModel","sidebar":"tutorialSidebar"},"internal-design/diesel":{"id":"internal-design/diesel","title":"Compare with Diesel","description":"SeaORM and Diesel share the same goal: to offer you a complete solution in interfacing with databases.","sidebar":"tutorialSidebar"},"internal-design/trait-and-type":{"id":"internal-design/trait-and-type","title":"Traits and Types","description":"Entity","sidebar":"tutorialSidebar"},"introduction/async":{"id":"introduction/async","title":"Async Programming","description":"Async programming in Rust is a recent development, only having been stabilized in Rust 1.39. The async ecosystem is rapidly evolving, and SeaORM is one of the first crates built from the ground up with async support in mind.","sidebar":"tutorialSidebar"},"introduction/orm":{"id":"introduction/orm","title":"What is an ORM","description":"An Object Relational Mapper (ORM) is a programming library to help you interact with a relational database from an Object-Oriented Programming (OOP) language.","sidebar":"tutorialSidebar"},"introduction/sea-orm":{"id":"introduction/sea-orm","title":"SeaORM Concepts","description":"In SeaORM, a database with a collection of tables is called a Schema.","sidebar":"tutorialSidebar"},"introduction/tutorial":{"id":"introduction/tutorial","title":"Tutorial & Examples","description":"If you prefer step-by-step tutorials on how to use SeaORM, you can checkout our SeaORM Tutorials.","sidebar":"tutorialSidebar"},"migration/running-migration":{"id":"migration/running-migration","title":"Running Migration","description":"After you have defined the migrations, you can apply or revert migrations in the terminal or on application startup.","sidebar":"tutorialSidebar"},"migration/seeding-data":{"id":"migration/seeding-data","title":"Seeding Data","description":"You can retrieve a DbConn from SchemaManager and perform data operations as needed, for example, to seed data.","sidebar":"tutorialSidebar"},"migration/setting-up-migration":{"id":"migration/setting-up-migration","title":"Setting Up Migration","description":"Version control your database schema with migrations written in SeaQuery or SQL.","sidebar":"tutorialSidebar"},"migration/writing-migration":{"id":"migration/writing-migration","title":"Writing Migration","description":"Each migration contains two methods: up and down. The up method is used to alter the database schema, such as adding new tables, columns or indexes, while the down method revert the actions performed in the up method.","sidebar":"tutorialSidebar"},"relation/bakery-schema":{"id":"relation/bakery-schema","title":"Bakery Schema","description":"Bakery Schema ERD","sidebar":"tutorialSidebar"},"relation/chained-relations":{"id":"relation/chained-relations","title":"Chained Relations","description":"The Related trait is a representation of the arrows (1-1, 1-N, M-N) we draw on Entity Relationship Diagrams. A Linked is composed of a chain of relations, and is useful when:","sidebar":"tutorialSidebar"},"relation/custom-join-condition":{"id":"relation/custom-join-condition","title":"Custom Join Condition","description":"Sometimes you might want to join on another table with custom conditions, such as:","sidebar":"tutorialSidebar"},"relation/many-to-many":{"id":"relation/many-to-many","title":"Many to Many","description":"A many-to-many relation is formed by three tables, where two tables are related via a junction table. As an example, a Cake has many Filling and Filling are shared by many Cake via an intermediate entity CakeFilling.","sidebar":"tutorialSidebar"},"relation/one-to-many":{"id":"relation/one-to-many","title":"One to Many","description":"A one-to-many relation is similar to a one-to-one relation. In the previous section, we gave the example of \\"a Cake entity has at most one Fruit topping\\". To make it a one-to-many relation, we remove the \\"at most one\\" constraint. So, we have a Cake entity that might have many Fruit toppings.","sidebar":"tutorialSidebar"},"relation/one-to-one":{"id":"relation/one-to-one","title":"One to One","description":"A one-to-one relation is the most basic type of database relation. Let say a Cake entity has at most one Fruit topping.","sidebar":"tutorialSidebar"},"relation/self-referencing":{"id":"relation/self-referencing","title":"Self Referencing","description":"In previous section, we introduced the Linked trait. It can also help you define self referencing relations.","sidebar":"tutorialSidebar"},"write-test/mock":{"id":"write-test/mock","title":"Mock Interface","description":"You can unit test your application logic using the mock database interface.","sidebar":"tutorialSidebar"},"write-test/sqlite":{"id":"write-test/sqlite","title":"Using SQLite","description":"If you want to test application logic that does not require database-specific features, SQLite will be a good choice for you.","sidebar":"tutorialSidebar"},"write-test/testing":{"id":"write-test/testing","title":"Robust & Correct","description":"Testing is an integral part of programming in Rust. You see, cargo test is built-in.","sidebar":"tutorialSidebar"}}}')}}]);